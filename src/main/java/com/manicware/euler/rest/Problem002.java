package com.manicware.euler.rest;

import com.manicware.euler.rest.response.Answer;
import com.manicware.euler.util.Fibonacci;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigInteger;
import java.util.Date;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Created by unamanic on 10/8/16.
 */
@RestController
@RequestMapping("/problem002")
@Qualifier("Problem002")
public class Problem002 implements Problem{

    private static final Logger log = LoggerFactory.getLogger(Problem001.class);

    private static final String QUESTION = "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n" +
            "\n" +
            "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n" +
            "\n" +
            "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";

    @Autowired
    Fibonacci fibonacci;

    public Problem002() {
    }

    public Problem002(Fibonacci fibonacci) {
        this.fibonacci = fibonacci;
    }

    @Override
    @RequestMapping("/")
    public Answer getQuestion() {
        Answer answer = new Answer();
        answer.setQuestion(QUESTION);
        return answer;
    }

    @Override
    public Answer doProblem(@PathVariable int limit) {
        Answer answer = new Answer();
        answer.setQuestion(QUESTION);
        long start = new Date().getTime();

        BigInteger ans = fibonacci.streamToLimit(limit).parallel()
                .filter(p -> p.mod(new BigInteger(String.valueOf(2))).equals(BigInteger.ZERO))
                .reduce(BigInteger.ZERO, BigInteger::add);

        answer.setAnswer(ans.toString());

        answer.setTime(new Date().getTime() - start);
        return answer;
    }
}
